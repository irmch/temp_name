using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using L2Market.Domain.Entities.ExResponseCommissionListPacket;
using L2Market.Domain.Services;
using L2Market.Domain.Common;
using L2Market.Domain.Events;

namespace L2Market.Core.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö
    /// </summary>
    public class CommissionService : IMarketService, IDisposable
    {
        private readonly ILocalEventBus _eventBus;
        private readonly uint _processId;
        private readonly ConcurrentDictionary<ulong, CommissionItem> _items;
        private readonly ConcurrentDictionary<int, HashSet<ulong>> _itemsByItemId;
        private readonly ConcurrentDictionary<ulong, DateTime> _itemLastSeen;
        private readonly Timer _cleanupTimer;
        private readonly object _lock = new object();
        
        // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (10 –º–∏–Ω—É—Ç –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π)
        private static readonly TimeSpan ItemLifetime = TimeSpan.FromMinutes(10);

        public CommissionService(ILocalEventBus eventBus, uint processId = 0)
        {
            _eventBus = eventBus ?? throw new ArgumentNullException(nameof(eventBus));
            _processId = processId;
            _items = new ConcurrentDictionary<ulong, CommissionItem>();
            _itemsByItemId = new ConcurrentDictionary<int, HashSet<ulong>>();
            _itemLastSeen = new ConcurrentDictionary<ulong, DateTime>();
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
            _eventBus.Subscribe<CommissionUpdatedEvent>(HandleCommissionUpdated);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã)
            _cleanupTimer = new Timer(CleanupExpiredItems, null, TimeSpan.FromMinutes(2), TimeSpan.FromMinutes(2));
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        /// </summary>
        private async Task HandleCommissionUpdated(CommissionUpdatedEvent evt)
        {
            try
            {
                await UpdateItemsAsync(evt.Items);
                await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[CommissionService] Updated {evt.Items.Count} items"));
            }
            catch (Exception ex)
            {
                await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[CommissionService] Error updating items: {ex.Message}"));
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ
        /// </summary>
        private async Task UpdateItemsAsync(IReadOnlyList<CommissionItem> newItems)
        {
            var currentTime = DateTime.UtcNow;
            
            await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[CommissionService] Adding/updating {newItems.Count} items"));
            
            // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            foreach (var item in newItems)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –æ—Å–æ–±—ã–º –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –Ω—É–ª–µ–≤—ã–º —Ü–µ–Ω–∞–º
                if (item.PricePerUnit == 0)
                {
                    await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[CommissionService] ‚ö†Ô∏è ZERO PRICE: ID={item.CommissionId}, Price={item.PricePerUnit}, Count={item.ItemInfo.Count}, Seller='{item.SellerName}', Type={item.CommissionItemType}, Duration={item.DurationType}"));
                }
                else if (item.PricePerUnit >= 1000000000000) // –¶–µ–Ω—ã –≤ —Ç—Ä–∏–ª–ª–∏–æ–Ω–∞—Ö
                {
                    var priceInTrillions = (double)item.PricePerUnit / 1000000000000;
                    await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[CommissionService] üí∞ TRILLION PRICE: ID={item.CommissionId}, Price={priceInTrillions:F2}T, Count={item.ItemInfo.Count}, Seller='{item.SellerName}'"));
                }
                else if (item.PricePerUnit >= 1000000000) // –¶–µ–Ω—ã –≤ –º–∏–ª–ª–∏–∞—Ä–¥–∞—Ö
                {
                    var priceInBillions = (double)item.PricePerUnit / 1000000000;
                    await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[CommissionService] üí∞ BILLION PRICE: ID={item.CommissionId}, Price={priceInBillions:F2}B, Count={item.ItemInfo.Count}, Seller='{item.SellerName}'"));
                }
                else
                {
                    await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[CommissionService] Item: ID={item.CommissionId}, Price={item.PricePerUnit}, Count={item.ItemInfo.Count}, Seller='{item.SellerName}'"));
                }
                
                _items.AddOrUpdate(item.CommissionId, item, (k, v) => item);
                _itemLastSeen.AddOrUpdate(item.CommissionId, currentTime, (k, v) => currentTime);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ ID –ø—Ä–µ–¥–º–µ—Ç–∞
                _itemsByItemId.AddOrUpdate(
                    item.ItemInfo.ItemId,
                    new HashSet<ulong> { item.CommissionId },
                    (k, v) =>
                    {
                        v.Add(item.CommissionId);
                        return v;
                    });
            }
            
            await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[CommissionService] Total items after update: {_items.Count}"));
        }

        public async Task<IEnumerable<object>> GetAllItemsAsync()
        {
            return await Task.FromResult(_items.Values.Cast<object>());
        }

        public async Task<IEnumerable<object>> GetItemsByItemIdAsync(int itemId)
        {
            if (_itemsByItemId.TryGetValue(itemId, out var itemIds))
            {
                var items = itemIds
                    .Where(id => _items.TryGetValue(id, out _))
                    .Select(id => _items[id])
                    .Cast<object>();
                
                return await Task.FromResult(items);
            }
            
            return await Task.FromResult(Enumerable.Empty<object>());
        }

        public async Task<IEnumerable<object>> GetItemsByPriceRangeAsync(long minPrice, long maxPrice)
        {
            var items = _items.Values
                .Where(item => (long)item.PricePerUnit >= minPrice && (long)item.PricePerUnit <= maxPrice)
                .Cast<object>();
            
            return await Task.FromResult(items);
        }

        public async Task<int> GetItemsCountAsync()
        {
            return await Task.FromResult(_items.Count);
        }

        public async Task ClearAsync()
        {
            _items.Clear();
            _itemsByItemId.Clear();
            _itemLastSeen.Clear();
            await Task.CompletedTask;
        }

        /// <summary>
        /// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        /// </summary>
        private async void CleanupExpiredItems(object? state)
        {
            try
            {
                var currentTime = DateTime.UtcNow;
                var expiredIds = new List<ulong>();

                // –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
                foreach (var kvp in _itemLastSeen)
                {
                    if (currentTime - kvp.Value > ItemLifetime)
                    {
                        expiredIds.Add(kvp.Key);
                    }
                }

                // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
                var removedCount = 0;
                foreach (var id in expiredIds)
                {
                    if (_items.TryRemove(id, out var removedItem))
                    {
                        _itemLastSeen.TryRemove(id, out _);
                        removedCount++;

                        // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ ID –ø—Ä–µ–¥–º–µ—Ç–∞
                        if (_itemsByItemId.TryGetValue(removedItem.ItemInfo.ItemId, out var itemIds))
                        {
                            itemIds.Remove(id);
                            if (itemIds.Count == 0)
                            {
                                _itemsByItemId.TryRemove(removedItem.ItemInfo.ItemId, out _);
                            }
                        }
                    }
                }

                if (removedCount > 0)
                {
                    await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[CommissionService] Removed {removedCount} expired items"));
                    // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª—è UI
                    await _eventBus.PublishAsync(new CommissionUpdatedEvent(new List<CommissionItem>(), _processId));
                }
            }
            catch (Exception ex)
            {
                await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[CommissionService] Error during cleanup: {ex.Message}"));
            }
        }

        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        /// </summary>
        public void Dispose()
        {
            _cleanupTimer?.Dispose();
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
        /// </summary>
        public async Task<IEnumerable<CommissionItem>> GetItemsBySellerAsync(string sellerName)
        {
            var items = _items.Values
                .Where(item => !string.IsNullOrEmpty(item.SellerName) && 
                              string.Equals(item.SellerName, sellerName, StringComparison.OrdinalIgnoreCase));
            
            return await Task.FromResult(items);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Ç–∏–ø—É –∫–æ–º–∏—Å—Å–∏–∏
        /// </summary>
        public async Task<IEnumerable<CommissionItem>> GetItemsByCommissionTypeAsync(int commissionType)
        {
            var items = _items.Values
                .Where(item => item.CommissionItemType == commissionType);
            
            return await Task.FromResult(items);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Ç–∏–ø—É –æ—Ç–≤–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
        /// </summary>
        public async Task<IEnumerable<CommissionItem>> GetItemsByReplyTypeAsync(CommissionListReplyType replyType)
        {
            // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –æ—Ç–≤–µ—Ç–∞
            // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —Å–µ—Ä–≤–∏—Å–µ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ replyType
            return await Task.FromResult(_items.Values);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Ç–∏–ø—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        /// </summary>
        public async Task<IEnumerable<CommissionItem>> GetItemsByDurationTypeAsync(int durationType)
        {
            var items = _items.Values
                .Where(item => item.DurationType == durationType);
            
            return await Task.FromResult(items);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã —Å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π
        /// </summary>
        public async Task<IEnumerable<CommissionItem>> GetItemsWithAugmentationAsync()
        {
            var items = _items.Values
                .Where(item => item.ItemInfo.Augmentation != null && 
                              item.ItemInfo.Augmentation.Any());
            
            return await Task.FromResult(items);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã —Å —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        /// </summary>
        public async Task<IEnumerable<CommissionItem>> GetItemsWithElementalAttributesAsync()
        {
            var items = _items.Values
                .Where(item => item.ItemInfo.ElementalAttrs != null && 
                              item.ItemInfo.ElementalAttrs.Any());
            
            return await Task.FromResult(items);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã —Å soul crystal –æ–ø—Ü–∏—è–º–∏
        /// </summary>
        public async Task<IEnumerable<CommissionItem>> GetItemsWithSoulCrystalAsync()
        {
            var items = _items.Values
                .Where(item => item.ItemInfo.SoulCrystalOptions != null && 
                              item.ItemInfo.SoulCrystalOptions.Any());
            
            return await Task.FromResult(items);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã —Å visual ID
        /// </summary>
        public async Task<IEnumerable<CommissionItem>> GetItemsWithVisualIdAsync()
        {
            var items = _items.Values
                .Where(item => item.ItemInfo.VisualId.HasValue);
            
            return await Task.FromResult(items);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—é –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏—è
        /// </summary>
        public async Task<IEnumerable<CommissionItem>> GetItemsByEnchantLevelAsync(int minEnchant, int maxEnchant)
        {
            var items = _items.Values
                .Where(item => item.ItemInfo.EnchantLevel >= minEnchant && 
                              item.ItemInfo.EnchantLevel <= maxEnchant);
            
            return await Task.FromResult(items);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        /// </summary>
        public async Task<IEnumerable<CommissionItem>> GetItemsByEndTimeAsync(int currentTime, int maxTimeRemaining)
        {
            var items = _items.Values
                .Where(item => item.EndTime - currentTime <= maxTimeRemaining);
            
            return await Task.FromResult(items);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        /// </summary>
        public async Task<CommissionStatistics> GetStatisticsAsync()
        {
            var items = _items.Values.ToList();
            var currentTime = (int)DateTimeOffset.UtcNow.ToUnixTimeSeconds();
            
            var stats = new CommissionStatistics
            {
                TotalItems = items.Count,
                UniqueSellers = items.Where(i => !string.IsNullOrEmpty(i.SellerName))
                                   .Select(i => i.SellerName)
                                   .Distinct()
                                   .Count(),
                UniqueItemTypes = items.Select(i => i.ItemInfo.ItemId).Distinct().Count(),
                AveragePrice = items.Any() ? (long)items.Average(i => (decimal)i.PricePerUnit) : 0,
                MinPrice = items.Any() ? (long)items.Min(i => i.PricePerUnit) : 0,
                MaxPrice = items.Any() ? (long)items.Max(i => i.PricePerUnit) : 0,
                ExpiringSoon = items.Count(i => i.EndTime - currentTime <= 3600), // 1 —á–∞—Å
                WithAugmentation = items.Count(i => i.ItemInfo.Augmentation != null && i.ItemInfo.Augmentation.Any()),
                WithElementalAttrs = items.Count(i => i.ItemInfo.ElementalAttrs != null && i.ItemInfo.ElementalAttrs.Any()),
                WithSoulCrystal = items.Count(i => i.ItemInfo.SoulCrystalOptions != null && i.ItemInfo.SoulCrystalOptions.Any()),
                WithVisualId = items.Count(i => i.ItemInfo.VisualId.HasValue),
                HighEnchantItems = items.Count(i => i.ItemInfo.EnchantLevel >= 10),
                BlessedItems = items.Count(i => i.ItemInfo.Blessed == true)
            };
            
            return await Task.FromResult(stats);
        }
    }

    /// <summary>
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
    /// </summary>
    public class CommissionStatistics
    {
        public int TotalItems { get; set; }
        public int UniqueSellers { get; set; }
        public int UniqueItemTypes { get; set; }
        public long AveragePrice { get; set; }
        public long MinPrice { get; set; }
        public long MaxPrice { get; set; }
        public int ExpiringSoon { get; set; }
        public int WithAugmentation { get; set; }
        public int WithElementalAttrs { get; set; }
        public int WithSoulCrystal { get; set; }
        public int WithVisualId { get; set; }
        public int HighEnchantItems { get; set; }
        public int BlessedItems { get; set; }
    }

}
