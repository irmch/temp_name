using System;
using System.Threading.Tasks;
using L2Market.Domain.Events;
using L2Market.Domain.Common;
using L2Market.Core.Services;

namespace L2Market.Core.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    /// </summary>
    public class NotificationService
    {
        private readonly IEventBus _eventBus;

        public NotificationService(IEventBus eventBus)
        {
            _eventBus = eventBus ?? throw new ArgumentNullException(nameof(eventBus));
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
        /// </summary>
        public async Task SendNotificationAsync(ItemMatch match)
        {
            if (match?.Rule == null || match?.Item == null) return;

            var rule = match.Rule;
            var item = match.Item;

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            var message = $"üí∞ –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –ø–æ –ø—Ä–∞–≤–∏–ª—É '{rule.Name}'\n" +
                         $"üì¶ {item.ItemName} (+{item.EnchantLevel})\n" +
                         $"üí∞ –¶–µ–Ω–∞: {item.FormattedPrice}\n" +
                         $"üè™ {item.MarketType} | –ü—Ä–æ–¥–∞–≤–µ—Ü: {item.SellerName}\n" +
                         $"‚è∞ {match.FoundAt:HH:mm:ss}";

            // –õ–æ–≥–∏—Ä—É–µ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[NOTIFICATION] {message}"));

            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
            if (rule.PlaySound)
            {
                await PlaySoundAsync();
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Discord (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
            if (rule.SendDiscord)
            {
                await SendDiscordMessageAsync(message);
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
            if (rule.SendTelegram)
            {
                await SendTelegramMessageAsync(message);
            }
        }

        /// <summary>
        /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        /// </summary>
        public async Task PlaySoundAsync(string? soundFile = null)
        {
            try
            {
                if (string.IsNullOrEmpty(soundFile))
                {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ (—Ç–æ–ª—å–∫–æ –Ω–∞ Windows)
                    if (System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(System.Runtime.InteropServices.OSPlatform.Windows))
                    {
                        System.Console.Beep(800, 200); // –ü—Ä–æ—Å—Ç–æ–π beep –∑–≤—É–∫
                    }
                }
                else
                {
                    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–≤—É–∫–∞
                    await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[NotificationService] Playing sound: {soundFile}"));
                }
            }
            catch (Exception ex)
            {
                await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[NotificationService] Error playing sound: {ex.Message}"));
            }
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Discord
        /// </summary>
        public async Task SendDiscordMessageAsync(string message)
        {
            try
            {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Discord —á–µ—Ä–µ–∑ webhook
                await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[DISCORD] {message}"));
            }
            catch (Exception ex)
            {
                await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[NotificationService] Error sending Discord message: {ex.Message}"));
            }
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        /// </summary>
        public async Task SendTelegramMessageAsync(string message)
        {
            try
            {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram —á–µ—Ä–µ–∑ Bot API
                await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[TELEGRAM] {message}"));
            }
            catch (Exception ex)
            {
                await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[NotificationService] Error sending Telegram message: {ex.Message}"));
            }
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        /// </summary>
        public async Task ShowPopupNotificationAsync(ItemMatch match)
        {
            try
            {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Windows
                var message = $"üí∞ {match.Item.ItemName} –∑–∞ {match.Item.FormattedPrice}";
                await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[POPUP] {message}"));
            }
            catch (Exception ex)
            {
                await _eventBus.PublishAsync(new LogMessageReceivedEvent($"[NotificationService] Error showing popup: {ex.Message}"));
            }
        }
    }
}
